// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace test {
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;
    using test;
    using uFrame.ECS.APIs;
    using uFrame.ECS.Components;
    using uFrame.ECS.Systems;
    using uFrame.Kernel;
    using UniRx;
    using UnityEngine;
    
    
    public partial class HealthSystemBase : uFrame.ECS.Systems.EcsSystem {
        
        private IEcsComponentManagerOf<Player> _PlayerManager;
        
        private IEcsComponentManagerOf<HealthComponent> _HealthComponentManager;
        
        private HealthSystemAttackEventHandler HealthSystemAttackEventHandlerInstance = new HealthSystemAttackEventHandler();
        
        public IEcsComponentManagerOf<Player> PlayerManager {
            get {
                return _PlayerManager;
            }
            set {
                _PlayerManager = value;
            }
        }
        
        public IEcsComponentManagerOf<HealthComponent> HealthComponentManager {
            get {
                return _HealthComponentManager;
            }
            set {
                _HealthComponentManager = value;
            }
        }
        
        public override void Setup() {
            base.Setup();
            PlayerManager = ComponentSystem.RegisterComponent<Player>(3);
            HealthComponentManager = ComponentSystem.RegisterComponent<HealthComponent>(2);
            this.OnEvent<test.AttackEvent>().Subscribe(_=>{ HealthSystemAttackEventFilter(_); }).DisposeWith(this);
        }
        
        protected virtual void HealthSystemAttackEventHandler(test.AttackEvent data, Player group) {
            var handler = HealthSystemAttackEventHandlerInstance;
            handler.System = this;
            handler.Event = data;
            handler.Group = group;
            handler.Execute();
        }
        
        protected void HealthSystemAttackEventFilter(test.AttackEvent data) {
            var PlayerItems = PlayerManager.Components;
            for (var PlayerIndex = 0
            ; PlayerIndex < PlayerItems.Count; PlayerIndex++
            ) {
                if (!PlayerItems[PlayerIndex].Enabled) {
                    continue;
                }
                this.HealthSystemAttackEventHandler(data, PlayerItems[PlayerIndex]);
            }
        }
    }
    
    [uFrame.Attributes.uFrameIdentifier("d420487b-827f-42c6-b95a-5363999f63c2")]
    public partial class HealthSystem : HealthSystemBase {
        
        private static HealthSystem _Instance;
        
        public HealthSystem() {
            Instance = this;
        }
        
        public static HealthSystem Instance {
            get {
                return _Instance;
            }
            set {
                _Instance = value;
            }
        }
    }
}
